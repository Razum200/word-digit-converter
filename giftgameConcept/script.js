// –í —Å–∞–º–æ–º –≤–µ—Ä—Ö—É script.js, –µ—â—ë –¥–æ –ª—é–±—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
let logLines = [];

// –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥
function clearLog() {
  logLines = [];
  document.getElementById('battleLog').innerText = '';
}

// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å
function updateLog(line) {
  logLines.push(line);
  if (logLines.length > 10) logLines.shift();       // —Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫
  document.getElementById('battleLog').innerText = logLines.join('\n');
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞ üß±üß±üß±üß±üß±üß±
function generateGrid(presents) {
    let grid = [];

    if (!presents || presents.length === 0) {
        return Array(81).fill({ type: "‚¨ú", hp: 1, defense: 0 });
    }

    presents.forEach(name => {
        const stats = giftStats[name];
        if (!stats) return;

        for (let i = 0; i < stats.attack; i++) grid.push({ type: "üü•", hp: 10, defense: 1 });
        for (let i = 0; i < stats.defense; i++) grid.push({ type: "‚¨õ", hp: 10, defense: 3 });
        for (let i = 0; i < stats.hp; i++) grid.push({ type: "‚¨ú", hp: 10, defense: 0 });
    });

    while (grid.length < 81) {
        grid.push({ type: "‚¨ú", hp: 1, defense: 0 });
    }

    return grid.slice(0, 81);
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ—Ç–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
function renderGrid(grid, playerId) {
    const gridContainer = document.getElementById(playerId);
    gridContainer.innerHTML = "";

    // –î–æ–±–∞–≤–∏–º –∫–ª–∞—Å—Å reverse –¥–ª—è –∏–≥—Ä–æ–∫–∞ B
    gridContainer.classList.toggle("reverse", playerId === "playerB");

    const displayGrid = playerId === "playerB" ? grid.slice().reverse() : grid;
    const linkBack = playerId === "playerB" ? (i => grid[grid.length - 1 - i]) : (i => grid[i]);

    displayGrid.forEach((pixel, index) => {
        const pixelDiv = document.createElement("div");
        pixelDiv.className = "pixel";
        pixelDiv.dataset.hp = pixel.hp;
        linkBack(index).domElement = pixelDiv;
        pixelDiv.innerHTML = `
            ${pixel.type}
            <div class="hp-bar" style="width: ${pixel.hp * 10}%"></div>
        `;
        gridContainer.appendChild(pixelDiv);

        // 
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–æ—è –º–µ–∂–¥—É –ø–∏–∫—Å–µ–ª—è–º–∏
function fight(pixA, pixB) {
    const damage = {
        "üü•": 12,
        "‚¨õ": 6,
        "‚¨ú": 1
    };

    // –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç —É–¥–∞—Ä–∞
    pixA.domElement?.classList.add("hit-flash");
    pixB.domElement?.classList.add("hit-flash");
    setTimeout(() => {
        pixA.domElement?.classList.remove("hit-flash");
        pixB.domElement?.classList.remove("hit-flash");
    }, 600);

    const dmgA = damage[pixA.type] || 0;
    const dmgB = damage[pixB.type] || 0;

    const effectiveDmgToA = Math.max(0, dmgB - (pixA.defense || 0));
    const effectiveDmgToB = Math.max(0, dmgA - (pixB.defense || 0));

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–ª—ë—Ç–∞ —Å–Ω–∞—Ä—è–¥–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∂–∏–≤—ã –∏ –Ω–∞–Ω–æ—Å—è—Ç —É—Ä–æ–Ω)
    if (dmgA > 0 && pixA.hp > 0 && pixB.hp > 0 && pixA.domElement && pixB.domElement) {
        animateProjectile(pixA.domElement, pixB.domElement);
    }
    if (dmgB > 0 && pixA.hp > 0 && pixB.hp > 0 && pixB.domElement && pixA.domElement) {
        animateProjectile(pixB.domElement, pixA.domElement);
    }

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–Ω–∞
    pixA.hp -= effectiveDmgToA;
    pixB.hp -= effectiveDmgToB;

    // –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ —É–º–µ—Ä ‚Äî –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å —á–µ—Ä–µ–ø
    if (pixA.domElement && pixA.hp <= 0) {
        pixA.hp = 0;
        pixA.domElement.innerHTML = `üíÄ<div class="hp-bar" style="width: 0%"></div>`;
    }
    if (pixB.domElement && pixB.hp <= 0) {
        pixB.hp = 0;
        pixB.domElement.innerHTML = `üíÄ<div class="hp-bar" style="width: 0%"></div>`;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∫–∞–ª HP
    if (pixA.domElement) {
        pixA.domElement.dataset.hp = pixA.hp;
        const bar = pixA.domElement.querySelector('.hp-bar');
        if (bar) bar.style.width = pixA.hp * 10 + '%';
    }

    if (pixB.domElement) {
        pixB.domElement.dataset.hp = pixB.hp;
        const bar = pixB.domElement.querySelector('.hp-bar');
        if (bar) bar.style.width = pixB.hp * 10 + '%';
    }

    const aAlive = pixA.hp > 0;
    const bAlive = pixB.hp > 0;

    let result;
    if (aAlive && !bAlive) result = "A –ø–æ–±–µ–∂–¥–∞–µ—Ç";
    else if (!aAlive && bAlive) result = "B –ø–æ–±–µ–∂–¥–∞–µ—Ç";
    else if (!aAlive && !bAlive) result = "–û–±–∞ –ø–æ–≥–∏–±–∞—é—Ç";
    else result = "–û–±–∞ –≤—ã–∂–∏–ª–∏";

    return {
        result,
        updatedA: aAlive ? pixA : null,
        updatedB: bAlive ? pixB : null,
        hpA: pixA.hp,
        hpB: pixB.hp
    };
}


// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –∏–≥—Ä–æ–∫–∞
function getSelectedGifts(playerId) {
    const container = document.getElementById(`${playerId}-selects`);
    return Array.from(container.querySelectorAll("select"))
        .map(sel => sel.value)
        .filter(value => value && giftStats[value]); // —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ
}

// –û–Ω–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∞—Ç–∞–∫—É, –∑–∞—â–∏—Ç—É –∏ –∑–¥–æ—Ä–æ–≤—å–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
function updatePlayerStats(playerId, current, initial) {
    const { attack, defense, hp } = current;
    // totalInit ‚Äî —Å—É–º–º–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã—Ö –±–ª–æ–∫–æ–≤ ATK+DEF+HP
    const totalInit = initial.attack + initial.defense + initial.hp || 1;
  
    // —Å—á–∏—Ç–∞–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å–≤–æ–µ–º—É –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–º—É —á–∏—Å–ª—É
    const atkPct = Math.round((attack  / totalInit) * 100);
    const defPct = Math.round((defense / totalInit) * 100);
    const hpPct  = Math.round((hp      / totalInit) * 100);
  
    const statsEl = document.getElementById(`${playerId}-stats`);
    statsEl.innerHTML = `
      <div class="combined-bar">
        <div class="seg atk" style="width: ${atkPct}%"></div>
        <div class="seg def" style="width: ${defPct}%"></div>
        <div class="seg hp"  style="width: ${hpPct}%"></div>
      </div>
      <div class="stat-label">
        ATK: ${attack} | DEF: ${defense} | HP: ${hp}
      </div>
    `;
    statsEl.style.display = 'block';
  }

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
function createGiftSelectors(playerId) {
    const container = document.getElementById(`${playerId}-selects`);
    container.innerHTML = ''; // –æ—á–∏—â–∞–µ–º

    for (let i = 0; i < 6; i++) {
        const select = document.createElement("select");

        Object.keys(giftStats).forEach(giftName => {
            const option = document.createElement("option");
            option.value = giftName;
            option.textContent = giftName;
            select.appendChild(option);
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
        select.addEventListener("change", function () {
            const newPresents = getSelectedGifts(playerId);
           // –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º ¬´—Ç–µ–∫—É—â–∏–µ¬ª —Å—Ç–∞—Ç—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
           const curr = calculateTotalStats(newPresents);
           // –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞—Ä, –ø–µ—Ä–µ–¥–∞–≤–∞—è current –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π initial
           updatePlayerStats(playerId, curr, initialStats[playerId]);
            // 2) –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–µ—Ç–∫—É
            const newGrid = generateGrid(newPresents);
            // 3) –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≥—Ä–∏–¥ –≤ –Ω—É–∂–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
            renderGrid(newGrid, playerId);
          });

        container.appendChild(select);
    }
}



function animateProjectile(fromEl, toEl) {
    return new Promise(resolve => {
      const rectFrom = fromEl.getBoundingClientRect();
      const rectTo = toEl.getBoundingClientRect();
  
      const projectile = document.createElement("div");
      projectile.className = "projectile";
      document.body.appendChild(projectile);
  
      projectile.style.left = rectFrom.left + "px";
      projectile.style.top = rectFrom.top + "px";
  
      const dx = rectTo.left - rectFrom.left;
      const dy = rectTo.top - rectFrom.top;
  
      projectile.style.setProperty('--transform', `translate(${dx}px, ${dy}px)`);
      projectile.style.animation = 'flyToTarget 0.6s ease forwards';
  
      projectile.addEventListener("animationend", () => {
        projectile.remove();
        resolve(); // –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–º–∏—Å
      });
    });
  }

// –ü–æ–∫–∞–∑ –ø—Ä–æ–µ–∫—Ç–∏—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
function showProjectile(fromEl, toEl, symbol, callback) {
    if (!fromEl || !toEl) return;

    const projectile = document.createElement("div");
    projectile.classList.add("projectile");
    projectile.textContent = symbol;

    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Å–Ω–∞—Ä—è–¥ —Å —É—á—ë—Ç–æ–º –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    document.body.appendChild(projectile);

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è —Å–Ω–∞—Ä—è–¥–∞
    const startPos = fromEl.getBoundingClientRect();
    const endPos = toEl.getBoundingClientRect();

    const deltaX = endPos.left - startPos.left;
    const deltaY = endPos.top - startPos.top;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —Å–Ω–∞—Ä—è–¥–∞
    projectile.style.position = "absolute";
    projectile.style.left = `${startPos.left + fromEl.offsetWidth / 2}px`;
    projectile.style.top = `${startPos.top + fromEl.offsetHeight / 2}px`;

    
    projectile.animate(
        [
            { transform: "translate(0, 0)" }, 
            { transform: `translate(${deltaX * 1.5}px, ${deltaY * 1.5}px)` }
        ],
        {
            duration: 1000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
            easing: "cubic-bezier(0.42, 0, 0.58, 1)" // –ü–ª–∞–≤–Ω–∞—è –∫—Ä–∏–≤–∞—è –ë–µ–∑—å–µ
        }
    );

    // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —É–¥–∞–ª—è–µ–º —Å–Ω–∞—Ä—è–¥
    setTimeout(() => {
        projectile.remove();
        callback();
    }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –≤—Ä–µ–º–µ–Ω–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
}



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Å–∏–ª—ã –∏–≥—Ä–æ–∫–∞
function calculateTotalStats(presents) {
    if (!Array.isArray(presents)) {
        return { attack: 0, defense: 0, hp: 0 };
    }

    let totalAttack = 0;
    let totalDefense = 0;
    let totalHP = 0;

    presents.forEach(name => {
        const stats = giftStats[name];
        if (stats) {
            totalAttack += stats.attack;
            totalDefense += stats.defense;
            totalHP += stats.hp;
        }
    });

    return {
        attack: totalAttack,
        defense: totalDefense,
        hp: totalHP
    };
}


let initialStats = {
    playerA: null,
    playerB: null
  };
  
function startFreeForAll() {
    // –ø–æ–¥—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –ª–æ–≥ –∏ –ø–∏—à–µ–º —à–∞–ø–∫—É
    clearLog();
    updateLog('üî• Berserk Mode –Ω–∞—á–∞–ª—Å—è');
  
    const selectedGiftsA = getSelectedGifts("playerA");
    const selectedGiftsB = getSelectedGifts("playerB");
  
    const gridA = generateGrid(selectedGiftsA);
    const gridB = generateGrid(selectedGiftsB);
  
    // 1) —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ stats –ø–æ –ø–∏–∫—Å–µ–ª—è–º
    const initialA = {
        attack:  gridA.filter(p => p.type === "üü•").length,
        defense: gridA.filter(p => p.type === "‚¨õ").length,
        hp:      gridA.reduce((sum, p) => sum + p.hp, 0)    // —Å—É–º–º–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ HP
      };
      const initialB = {
        attack:  gridB.filter(p => p.type === "üü•").length, // —Ç–µ–ø–µ—Ä—å gridB!
        defense: gridB.filter(p => p.type === "‚¨õ").length,
        hp:      gridB.reduce((sum, p) => sum + p.hp, 0)
      };
  
    // –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–µ—Ç–∫–∏
    renderGrid(gridA, "playerA");
    renderGrid(gridB, "playerB");
  
    // 2) —Å—Ä–∞–∑—É —Ä–∏—Å—É–µ–º –ø–æ–ª–æ—Å–∫–∏ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    updatePlayerStats("playerA", initialA, initialA);
    updatePlayerStats("playerB", initialB, initialB);
  
    let indexA = 0, indexB = 0;
  
    function isAlive(pixel) {
      return pixel.hp > 0;
    }
  
    function nextAlive(grid, index) {
      while (index < grid.length && !isAlive(grid[index])) {
        index++;
      }
      return index < grid.length ? index : -1;
    }
  
    function battleStep() {
      indexA = nextAlive(gridA, indexA);
      indexB = nextAlive(gridB, indexB);
  
      if (indexA === -1 && indexB === -1) {
        updateLog("‚öîÔ∏è –ë–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∏–∫—Ç–æ –Ω–µ –≤—ã–∂–∏–ª.");
        return;
      }
      if (indexA === -1) {
        updateLog("üéâ –ü–æ–±–µ–¥–∞ –ò–≥—Ä–æ–∫–∞ B!");
        return;
      }
      if (indexB === -1) {
        updateLog("üéâ –ü–æ–±–µ–¥–∞ –ò–≥—Ä–æ–∫–∞ A!");
        return;
      }
  
      const pixA = gridA[indexA];
      const pixB = gridB[indexB];
  
      fight(pixA, pixB);
      updateLog(`üî• –ü–∏–∫—Å–µ–ª–∏ A[${indexA}] –∏ B[${indexB}] –∞—Ç–∞–∫–æ–≤–∞–ª–∏`);
  
      // 3) –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ stats
      const currA = {
        attack:  gridA.filter(p => p.type === "üü•" && p.hp > 0).length,
        defense: gridA.filter(p => p.type === "‚¨õ" && p.hp > 0).length,
        hp: gridA.reduce((sum, p) => sum + Math.max(p.hp, 0), 0)
      };
      const currB = {
        attack:  gridB.filter(p => p.type === "üü•" && p.hp > 0).length,
        defense: gridB.filter(p => p.type === "‚¨õ" && p.hp > 0).length,
        hp: gridB.reduce((sum, p) => sum + Math.max(p.hp, 0), 0)
      };
  
      // –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–æ—Å–∫–∏
      updatePlayerStats("playerA", currA, initialA);
      updatePlayerStats("playerB", currB, initialB);
  
      setTimeout(battleStep, 600); // –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ö–æ–¥–∞–º–∏
    }
  
    battleStep();
  }

function endBattle(logLines) {
    const logElement = document.getElementById("battleLog");
    logElement.textContent = logLines.join("\n");
}

function startFreeForAllBattle() {
    clearLog();
    updateLog("üî• –†–µ–∂–∏–º: –í—Å–µ –ø—Ä–æ—Ç–∏–≤ –≤—Å–µ—Ö");
  
    const presentsA = Array.from(document.querySelectorAll("#playerA-selects select")).map(s => s.value);
    const presentsB = Array.from(document.querySelectorAll("#playerB-selects select")).map(s => s.value);
  
    let gridA = generateGrid(presentsA);
    let gridB = generateGrid(presentsB);
  
    // 1) –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ stats –ø–æ –ø–∏–∫—Å–µ–ª—è–º
    const initialA = {
        attack:  gridA.filter(p => p.type === "üü•").length,
        defense: gridA.filter(p => p.type === "‚¨õ").length,
        hp:      gridA.reduce((sum, p) => sum + p.hp, 0)    // —Å—É–º–º–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ HP
      };
      const initialB = {
        attack:  gridB.filter(p => p.type === "üü•").length, // —Ç–µ–ø–µ—Ä—å gridB!
        defense: gridB.filter(p => p.type === "‚¨õ").length,
        hp:      gridB.reduce((sum, p) => sum + p.hp, 0)
      };
  
    renderGrid(gridA, "playerA");
    renderGrid(gridB, "playerB");
  
    // 2) —Å—Ä–∞–∑—É —Ä–∏—Å—É–µ–º –ø–æ–ª–æ—Å–∫–∏
    updatePlayerStats("playerA", { ...initialA }, initialA);
    updatePlayerStats("playerB", { ...initialB }, initialB);
  
    const getAlive = grid => grid.filter(p => p.hp > 0);
    let round = 1;
  
    function nextRound() {
      const aliveA = getAlive(gridA);
      const aliveB = getAlive(gridB);
  
      if (!aliveA.length || !aliveB.length) {
        const winner = aliveA.length ? "–ò–≥—Ä–æ–∫ A" : aliveB.length ? "–ò–≥—Ä–æ–∫ B" : "–ù–∏–∫—Ç–æ";
        updateLog(`üèÅ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winner}`);
        return;
      }
  
      updateLog(`‚öî –†–∞—É–Ω–¥ ${round++} ‚Äî ${aliveA.length} vs ${aliveB.length}`);
  
      const attackersA = [...aliveA];
      const attackersB = [...aliveB];
      let i = 0;
  
      function step() {
        if (i >= Math.max(attackersA.length, attackersB.length)) {
          // –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è volleya ‚Äî —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
          return setTimeout(nextRound, 600);
        }
  
        const attackerA = attackersA[i % attackersA.length];
        const targetB   = getAlive(gridB)[0];
        const attackerB = attackersB[i % attackersB.length];
        const targetA   = getAlive(gridA)[0];
  
        if (attackerA && targetB) fight(attackerA, targetB);
        if (attackerB && targetA) fight(attackerB, targetA);
  
        // ** –°—Ä–∞–∑—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –≤—ã—Å—Ç—Ä–µ–ª–∞ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–æ—Å–∫–∏ **
        const currA = {
            attack:  gridA.filter(p => p.type==="üü•" && p.hp>0).length,
            defense: gridA.filter(p => p.type==="‚¨õ" && p.hp>0).length,
            hp: gridA.reduce((sum,p)=> sum + Math.max(p.hp,0), 0)
          };
        const currB = {
            attack:  gridB.filter(p => p.type==="üü•" && p.hp>0).length,
            defense: gridB.filter(p => p.type==="‚¨õ" && p.hp>0).length,
            hp: gridB.reduce((sum,p)=> sum + Math.max(p.hp,0), 0)
          };
        updatePlayerStats("playerA", currA, initialA);
        updatePlayerStats("playerB", currB, initialB);
  
        i++;
        setTimeout(step, 150);
      }
  
      step();
    }
  
    nextRound();
  }

function randomizeSelects(playerId) {
    const selects = document.querySelectorAll(`#${playerId}-selects select`);
    const giftNames = Object.keys(giftStats);
    selects.forEach(select => {
      const rnd = giftNames[Math.floor(Math.random() * giftNames.length)];
      select.value = rnd;
    });
  }



// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.onload = () => {
    createGiftSelectors("playerA");
    createGiftSelectors("playerB");
  
    randomizeSelects("playerA");
    randomizeSelects("playerB");
  
    // --- PLAYER A ---
    const presentsA = getSelectedGifts("playerA");
    const gridA     = generateGrid(presentsA);
    const initialA = {
      attack:  gridA.filter(p => p.type === "üü•").length,
      defense: gridA.filter(p => p.type === "‚¨õ").length,
      hp:      gridA.reduce((sum, p) => sum + p.hp, 0)
    };
    initialStats.playerA = initialA;     
    updatePlayerStats("playerA", initialA, initialA);
    renderGrid(gridA, "playerA");
  
    // --- PLAYER B ---
    const presentsB = getSelectedGifts("playerB");
    const gridB     = generateGrid(presentsB);
    const initialB = {
      attack:  gridB.filter(p => p.type === "üü•").length,
      defense: gridB.filter(p => p.type === "‚¨õ").length,
      hp:      gridB.reduce((sum, p) => sum + p.hp, 0)
    };
    initialStats.playerB = initialB;            
    updatePlayerStats("playerB", initialB, initialB);
    renderGrid(gridB, "playerB");
  };
