
// –í —Å–∞–º–æ–º –≤–µ—Ä—Ö—É script.js, –µ—â—ë –¥–æ –ª—é–±—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π–π–π–π–π
let logLines = [];
// —Å—é–¥–∞ –±—É–¥–µ–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å ¬´–∏—Å—Ö–æ–¥–Ω—ã–µ¬ª —Å—Ç–∞—Ç—ã –¥–ª—è A –∏ B
let initialStats = {
  playerA: null,
  playerB: null
};

// –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥
function clearLog() {
  logLines = [];
  document.getElementById('battleLog').innerText = '';
}

// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å
function updateLog(line) {
  logLines.push(line);
  if (logLines.length > 4) logLines.shift();       // —Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å—Ç—Ä–æ–∫–∏
  document.getElementById('battleLog').innerText = logLines.join('\n');
}

/**
 * –°–æ–±–∏—Ä–∞–µ—Ç –∏–∑ DOM –¥–ª—è –∏–≥—Ä–æ–∫–∞ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
 * [{ gls: 'BEAST', nft: 'Pepe', model: 'Golden', patt: 'Octo', bg: 'Black' }, ‚Ä¶]
 */
function getAllPresents(playerId) {
  const container = document.getElementById(`${playerId}-selects`);
  return Array.from(container.children).map(slotDiv => {
    const [g, n, m, p, b] = slotDiv.querySelectorAll('select');
    return {
      gls:   g.value,
      nft:   n.value,
      model: m.value,
      patt:  p.value,
      bg:    b.value
    };
  });
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞ üß±üß±üß±
// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ‚Äî –±–µ—Ä—ë–º –≤–µ—Å—å –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ {gls,nft,model,patt,bg}
function generateGrid(presentsArr) {
  // –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤ ‚Äî –ø—Ä–æ—Å—Ç–æ 81 ¬´–ø—É—Å—Ç—ã—à–∫–∞¬ª
  if (!Array.isArray(presentsArr) || presentsArr.length === 0) {
    return Array(81).fill({ type: "‚¨ú", hp: 1, defense: 0 });
  }

  // 1) –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø—è—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å—Ç–∞—Ç–æ–≤
  const stats = calculateTotalStats(presentsArr);  
  //    stats = { attack: X, defense: Y, hp: Z }

  // 2) —Å—Ç—Ä–æ–∏–º –º–∞—Å—Å–∏–≤ –ø–∏–∫—Å–µ–ª–µ–π
  const grid = [];
  for (let i = 0; i < stats.attack; i++)   grid.push({ type: "üü•", hp: 10, defense: 9 });
  for (let i = 0; i < stats.defense; i++)  grid.push({ type: "‚¨õ", hp: 10, defense: 5 });
  for (let i = 0; i < stats.hp; i++) grid.push({ type: "‚¨ú", hp: 10,  defense: 1 });

  // 3) –¥–æ–ø–æ–ª–Ω—è–µ–º –¥–æ 81 ¬´–ø—É—Å—Ç—ã—à–∫–æ–π¬ª —Å hp=1
  while (grid.length < 81) {
    grid.push({ type: "‚ñ´Ô∏è", hp: 1, defense: 0 });   // ‚Üê —Ç–µ–ø–µ—Ä—å hp:1
  }

  return grid;
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ—Ç–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
function renderGrid(grid, playerId) {
    const gridContainer = document.getElementById(playerId);
    gridContainer.innerHTML = "";

    // –î–æ–±–∞–≤–∏–º –∫–ª–∞—Å—Å reverse –¥–ª—è –∏–≥—Ä–æ–∫–∞ B
    gridContainer.classList.toggle("reverse", playerId === "playerB");

    const displayGrid = playerId === "playerB" ? grid.slice().reverse() : grid;
    const linkBack = playerId === "playerB" ? (i => grid[grid.length - 1 - i]) : (i => grid[i]);

    displayGrid.forEach((pixel, index) => {
        const pixelDiv = document.createElement("div");
        pixelDiv.className = "pixel";
        pixelDiv.dataset.hp = pixel.hp;
        linkBack(index).domElement = pixelDiv;
        pixelDiv.innerHTML = `
            ${pixel.type}
            <div class="hp-bar" style="width: ${pixel.hp * 10}%"></div>
        `;
        gridContainer.appendChild(pixelDiv);

        // 
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–æ—è –º–µ–∂–¥—É –ø–∏–∫—Å–µ–ª—è–º–∏
function fight(pixA, pixB) {
    const damage = {
        "üü•": 10,
        "‚¨õ": 6,
        "‚¨ú": 2
    };

    // –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç —É–¥–∞—Ä–∞
    pixA.domElement?.classList.add("hit-flash");
    pixB.domElement?.classList.add("hit-flash");
    setTimeout(() => {
        pixA.domElement?.classList.remove("hit-flash");
        pixB.domElement?.classList.remove("hit-flash");
    }, 600);

    const dmgA = damage[pixA.type] || 0;
    const dmgB = damage[pixB.type] || 0;

    const effectiveDmgToA = Math.max(0, dmgB - (pixA.defense || 0));
    const effectiveDmgToB = Math.max(0, dmgA - (pixB.defense || 0));

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–ª—ë—Ç–∞ —Å–Ω–∞—Ä—è–¥–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∂–∏–≤—ã –∏ –Ω–∞–Ω–æ—Å—è—Ç —É—Ä–æ–Ω)
    if (dmgA > 0 && pixA.hp > 0 && pixB.hp > 0 && pixA.domElement && pixB.domElement) {
        animateProjectile(pixA.domElement, pixB.domElement);
    }
    if (dmgB > 0 && pixA.hp > 0 && pixB.hp > 0 && pixB.domElement && pixA.domElement) {
        animateProjectile(pixB.domElement, pixA.domElement);
    }

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–Ω–∞
    pixA.hp -= effectiveDmgToA;
    pixB.hp -= effectiveDmgToB;

    // –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ —É–º–µ—Ä ‚Äî –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å —á–µ—Ä–µ–ø
    if (pixA.domElement && pixA.hp <= 0) {
        pixA.hp = 0;
        pixA.domElement.innerHTML = `üíÄ<div class="hp-bar" style="width: 0%"></div>`;
    }
    if (pixB.domElement && pixB.hp <= 0) {
        pixB.hp = 0;
        pixB.domElement.innerHTML = `üíÄ<div class="hp-bar" style="width: 0%"></div>`;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∫–∞–ª HP
    if (pixA.domElement) {
        pixA.domElement.dataset.hp = pixA.hp;
        const bar = pixA.domElement.querySelector('.hp-bar');
        if (bar) bar.style.width = pixA.hp * 10 + '%';
    }

    if (pixB.domElement) {
        pixB.domElement.dataset.hp = pixB.hp;
        const bar = pixB.domElement.querySelector('.hp-bar');
        if (bar) bar.style.width = pixB.hp * 10 + '%';
    }

    const aAlive = pixA.hp > 0;
    const bAlive = pixB.hp > 0;

    let result;
    if (aAlive && !bAlive) result = "A –ø–æ–±–µ–∂–¥–∞–µ—Ç";
    else if (!aAlive && bAlive) result = "B –ø–æ–±–µ–∂–¥–∞–µ—Ç";
    else if (!aAlive && !bAlive) result = "–û–±–∞ –ø–æ–≥–∏–±–∞—é—Ç";
    else result = "–û–±–∞ –≤—ã–∂–∏–ª–∏";

    return {
        result,
        updatedA: aAlive ? pixA : null,
        updatedB: bAlive ? pixB : null,
        hpA: pixA.hp,
        hpB: pixB.hp
    };
}


// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –∏–∏–∏–≥—Ä–æ–∫–∞–∞–∞–∞–∞–∞
function createGiftInputs(playerId) {
  const container = document.getElementById(`${playerId}-selects`);
  container.innerHTML = '';

  // —É—Ç–∏–ª–∏—Ç–∫–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤—ã–ø–∞–¥–∞—à–µ—á–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
  function makeSelect(statsLabel, statsObj) {
    const wrapper = document.createElement('div');
    wrapper.className = 'gift-attr';
  
    // —Å–æ–∑–¥–∞—ë–º <select> –±–µ–∑ <label>
    const sel = document.createElement('select');
    sel.title = statsLabel;               // —Ç—É–ª—Ç–∏–ø —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∞—Ç—Ä–∏–±—É—Ç–∞
    sel.setAttribute('aria-label', statsLabel); // –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
  
    // –æ–ø—Ü–∏–∏ –∏–∑ statsObj
    Object.keys(statsObj).forEach(key => {
      const opt = document.createElement('option');
      opt.value       = key;
      opt.textContent = key;
      sel.appendChild(opt);
    });
  
    wrapper.appendChild(sel);
    return wrapper;
  }

  // —Ç–µ–ø–µ—Ä—å 6 ¬´—Å—Ç—Ä–æ–∫¬ª, –∫–∞–∂–¥–∞—è —Å –Ω–æ–º–µ—Ä–æ–º –∏ –ø—è—Ç—å—é —Å–µ–ª–µ–∫—Ç–∞–º–∏
  for (let i = 0; i < 6; i++) {
    const slotDiv = document.createElement('div');
    slotDiv.className = 'gift-slot';

    // –ù–æ–º–µ—Ä —Å–ª–æ—Ç–∞
    const num = document.createElement('span');
    num.className = 'slot-number';
    num.textContent = (i + 1) + '.';
    slotDiv.appendChild(num);

    // –ø—è—Ç—å –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    slotDiv.append(
      makeSelect('GLS',     glsStats),
      makeSelect('NFT',     nftStats),
      makeSelect('–ú–û–î–ï–õ–¨',  modelStats),
      makeSelect('–£–ó–û–†',    patternStats),
      makeSelect('–§–û–ù',     bgStats),
    );

    // –Ω–∞–≤–µ—à–∏–≤–∞–µ–º onchange –Ω–∞ –≤—Å–µ —Å–µ–ª–µ–∫—Ç—ã –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏
    slotDiv.querySelectorAll('select').forEach(sel => {
      sel.addEventListener('change', () => {
        // 1) —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç—É
        const presents = getAllPresents(playerId);
    
        // 2) –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º ¬´–ø–∏–∫—Å–µ–ª—å–Ω—É—é¬ª —Å–µ—Ç–∫—É
        const grid = generateGrid(presents);
    
        // 3) –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ stats –ø–æ —Å–∞–º–æ–π —Å–µ—Ç–∫–µ
        const currStats = {
          attack:  grid.filter(p => p.type === "üü•" && p.hp > 0).length,
          defense: grid.filter(p => p.type === "‚¨õ" && p.hp > 0).length,
          hp:      grid.reduce((sum, p) => sum + p.hp, 0)
        };
    
        // 4) –æ–±–Ω–æ–≤–ª—è–µ–º baseline, —á—Ç–æ–±—ã HP‚Äë–±–∞—Ä –ø–æ–∫–∞–∑—ã–≤–∞–ª 100% –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ max
        initialStats[playerId] = { ...currStats };
    
        // 5) –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–µ—Ç–∫—É –∏ —Å—Ç–∞—Ç—É—Å‚Äë–±–∞—Ä—ã
        renderGrid(grid, playerId);
        updatePlayerStats(playerId, currStats, initialStats[playerId]);
      });
    });

    container.appendChild(slotDiv);
  }
}

/**
 * –ó–∞–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ —Å–µ–ª–µ–∫—Ç—ã –≤ –∫–∞–∂–¥–æ–º —Å–ª–æ—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
 */
function randomizeGiftInputs(playerId) {
  const container = document.getElementById(`${playerId}-selects`);
  const statsList = [ glsStats, nftStats, modelStats, patternStats, bgStats ];
  container.querySelectorAll('.gift-slot').forEach(slotDiv => {
    const selects = slotDiv.querySelectorAll('select');
    selects.forEach((sel, idx) => {
      const keys = Object.keys(statsList[idx]);
      sel.value = keys[Math.floor(Math.random() * keys.length)];
    });
    
  });
}

// –û–Ω–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∞—Ç–∞–∫—É, –∑–∞—â–∏—Ç—É –∏ –∑–¥–æ—Ä–æ–≤—å–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
function updatePlayerStats(playerId, current, initial) {
  const { attack, defense, hp } = current;

  // 1) ATK+DEF bar ‚Äî –∏—Ö —Å—É–º–º–∞ –≤—Å–µ–≥–¥–∞ 100%
  const adTotal = (attack + defense) || 1;
  const atkPct = Math.round((attack  / adTotal) * 100);
  const defPct = Math.round((defense / adTotal) * 100);

  // 2) HP bar ‚Äî –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ HP
  const hpPct = initial.hp > 0
    ? Math.round((hp / initial.hp) * 100)
    : 0;

  const statsEl = document.getElementById(`${playerId}-stats`);
  statsEl.innerHTML = `
  <div class="combined-bar">
    <div class="seg atk"   style="width: ${atkPct}%;"></div>
    <div class="seg def"   style="width: ${defPct}%;"></div>
  </div>
  <div class="hp-bar-extra">
    <div class="hp-fill"   style="width: ${hpPct}%;"></div>
  </div>
  <div class="stat-label">
    ATK: ${attack} | DEF: ${defense} | HP: ${hp}
  </div>
`;
  statsEl.style.display = 'block';
}

function animateProjectile(fromEl, toEl) {
    return new Promise(resolve => {
      const rectFrom = fromEl.getBoundingClientRect();
      const rectTo = toEl.getBoundingClientRect();
  
      const projectile = document.createElement("div");
      projectile.className = "projectile";
      document.body.appendChild(projectile);
  
      projectile.style.left = rectFrom.left + "px";
      projectile.style.top = rectFrom.top + "px";
  
      const dx = rectTo.left - rectFrom.left;
      const dy = rectTo.top - rectFrom.top;
  
      projectile.style.setProperty('--transform', `translate(${dx}px, ${dy}px)`);
      projectile.style.animation = 'flyToTarget 0.6s ease forwards';
  
      projectile.addEventListener("animationend", () => {
        projectile.remove();
        resolve(); // –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–º–∏—Å
      });
    });
  }

// –ü–æ–∫–∞–∑ –ø—Ä–æ–µ–∫—Ç–∏—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
function showProjectile(fromEl, toEl, symbol, callback) {
    if (!fromEl || !toEl) return;

    const projectile = document.createElement("div");
    projectile.classList.add("projectile");
    projectile.textContent = symbol;

    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Å–Ω–∞—Ä—è–¥ —Å —É—á—ë—Ç–æ–º –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    document.body.appendChild(projectile);

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è —Å–Ω–∞—Ä—è–¥–∞
    const startPos = fromEl.getBoundingClientRect();
    const endPos = toEl.getBoundingClientRect();

    const deltaX = endPos.left - startPos.left;
    const deltaY = endPos.top - startPos.top;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —Å–Ω–∞—Ä—è–¥–∞
    projectile.style.position = "absolute";
    projectile.style.left = `${startPos.left + fromEl.offsetWidth / 2}px`;
    projectile.style.top = `${startPos.top + fromEl.offsetHeight / 2}px`;

    
    projectile.animate(
        [
            { transform: "translate(0, 0)" }, 
            { transform: `translate(${deltaX * 1.5}px, ${deltaY * 1.5}px)` }
        ],
        {
            duration: 1000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
            easing: "cubic-bezier(0.42, 0, 0.58, 1)" // –ü–ª–∞–≤–Ω–∞—è –∫—Ä–∏–≤–∞—è –ë–µ–∑—å–µ
        }
    );

    // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —É–¥–∞–ª—è–µ–º —Å–Ω–∞—Ä—è–¥
    setTimeout(() => {
        projectile.remove();
        callback();
    }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –≤—Ä–µ–º–µ–Ω–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
}



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Å–∏–ª—ã –∏–≥—Ä–æ–∫–∞
function calculateTotalStats(presentsArr) {
  const sums = { attack: 0, defense: 0, hp: 0 };
  presentsArr.forEach(p => {
    [
      glsStats[p.gls],
      nftStats[p.nft],
      modelStats[p.model],
      patternStats[p.patt],
      bgStats[p.bg]
    ].forEach(stats => {
      if (!stats) return;
      sums.attack  += stats.attack  || 0;
      sums.defense += stats.defense || 0;
      sums.hp      += stats.hp      || 0;   // ‚Üê –∑–¥–µ—Å—å
    });
  });
  return sums;
}
  
function startFreeForAll() {
    // –ø–æ–¥—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –ª–æ–≥ –∏ –ø–∏—à–µ–º —à–∞–ø–∫—É
    clearLog();
    updateLog('üî• Berserk Mode –Ω–∞—á–∞–ª—Å—è');
  
    const allPresentsA = getAllPresents("playerA");
    const allPresentsB = getAllPresents("playerB");

    const gridA = generateGrid(allPresentsA);
    const gridB = generateGrid(allPresentsB);
  
    // 1) —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ stats –ø–æ –ø–∏–∫—Å–µ–ª—è–º
    const initialA = {
        attack:  gridA.filter(p => p.type === "üü•").length,
        defense: gridA.filter(p => p.type === "‚¨õ").length,
        hp:      gridA.reduce((sum, p) => sum + p.hp, 0)    // —Å—É–º–º–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ HP
      };
      const initialB = {
        attack:  gridB.filter(p => p.type === "üü•").length, // —Ç–µ–ø–µ—Ä—å gridB!
        defense: gridB.filter(p => p.type === "‚¨õ").length,
        hp:      gridB.reduce((sum, p) => sum + p.hp, 0)
      };
  
    // –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–µ—Ç–∫–∏
    renderGrid(gridA, "playerA");
    renderGrid(gridB, "playerB");
  
    // 2) —Å—Ä–∞–∑—É —Ä–∏—Å—É–µ–º –ø–æ–ª–æ—Å–∫–∏ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    updatePlayerStats("playerA", initialA, initialA);
    updatePlayerStats("playerB", initialB, initialB);
  
    // –ü–æ—Å–ª–µ –≤—Å–µ–≥–æ ‚Äî –ø–ª–∞–≤–Ω–æ —Å–∫—Ä–æ–ª–ª–∏–º –∫ –∞—Ä–µ–Ω–µ
    document.getElementById('arena').scrollIntoView({
      behavior: 'smooth',
      block: 'start'
    });

    let indexA = 0, indexB = 0;

    
  
    function isAlive(pixel) {
      return pixel.hp > 0;
    }
  
    function nextAlive(grid, index) {
      while (index < grid.length && !isAlive(grid[index])) {
        index++;
      }
      return index < grid.length ? index : -1;
    }
  
    function battleStep() {
      indexA = nextAlive(gridA, indexA);
      indexB = nextAlive(gridB, indexB);
  
      if (indexA === -1 && indexB === -1) {
        updateLog("‚öîÔ∏è –ë–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∏–∫—Ç–æ –Ω–µ –≤—ã–∂–∏–ª.");
        return;
      }
      if (indexA === -1) {
        updateLog("üéâ –ü–æ–±–µ–¥–∞ –ò–≥—Ä–æ–∫–∞ B!");
        return;
      }
      if (indexB === -1) {
        updateLog("üéâ –ü–æ–±–µ–¥–∞ –ò–≥—Ä–æ–∫–∞ A!");
        return;
      }
  
      const pixA = gridA[indexA];
      const pixB = gridB[indexB];
  
      fight(pixA, pixB);
      updateLog(`üî• –ü–∏–∫—Å–µ–ª–∏ A[${indexA}] –∏ B[${indexB}] –∞—Ç–∞–∫–æ–≤–∞–ª–∏`);
  
      // 3) –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ stats
      const currA = {
        attack:  gridA.filter(p => p.type === "üü•" && p.hp > 0).length,
        defense: gridA.filter(p => p.type === "‚¨õ" && p.hp > 0).length,
        hp: gridA.reduce((sum, p) => sum + Math.max(p.hp, 0), 0)
      };
      const currB = {
        attack:  gridB.filter(p => p.type === "üü•" && p.hp > 0).length,
        defense: gridB.filter(p => p.type === "‚¨õ" && p.hp > 0).length,
        hp: gridB.reduce((sum, p) => sum + Math.max(p.hp, 0), 0)
      };
  
      // –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–æ—Å–∫–∏
      updatePlayerStats("playerA", currA, initialA);
      updatePlayerStats("playerB", currB, initialB);
  
      setTimeout(battleStep, 600); // –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ö–æ–¥–∞–º–∏
    }
  
    battleStep();
  }

function endBattle(logLines) {
    const logElement = document.getElementById("battleLog");
    logElement.textContent = logLines.join("\n");
}

function startFreeForAllBattle() {
    clearLog();
    updateLog("üî• –†–µ–∂–∏–º: –í—Å–µ –ø—Ä–æ—Ç–∏–≤ –≤—Å–µ—Ö");
  
    const allA = getAllPresents("playerA");
    const allB = getAllPresents("playerB");
    let gridA = generateGrid(allA);
    let gridB = generateGrid(allB);
  
    // 1) –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ stats –ø–æ –ø–∏–∫—Å–µ–ª—è–º
    const initialA = {
        attack:  gridA.filter(p => p.type === "üü•").length,
        defense: gridA.filter(p => p.type === "‚¨õ").length,
        hp:      gridA.reduce((sum, p) => sum + p.hp, 0)    // —Å—É–º–º–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ HP
      };
      const initialB = {
        attack:  gridB.filter(p => p.type === "üü•").length, // —Ç–µ–ø–µ—Ä—å gridB!
        defense: gridB.filter(p => p.type === "‚¨õ").length,
        hp:      gridB.reduce((sum, p) => sum + p.hp, 0)
      };
  
    renderGrid(gridA, "playerA");
    renderGrid(gridB, "playerB");
  
    // 2) —Å—Ä–∞–∑—É —Ä–∏—Å—É–µ–º –ø–æ–ª–æ—Å–∫–∏
    updatePlayerStats("playerA", { ...initialA }, initialA);
    updatePlayerStats("playerB", { ...initialB }, initialB);
  
    // –ü–æ—Å–ª–µ –≤—Å–µ–≥–æ ‚Äî –ø–ª–∞–≤–Ω–æ —Å–∫—Ä–æ–ª–ª–∏–º –∫ –∞—Ä–µ–Ω–µ
    document.getElementById('arena').scrollIntoView({
      behavior: 'smooth',
      block: 'start'
    });

    const getAlive = grid => grid.filter(p => p.hp > 0);
    let round = 1;
  
    function nextRound() {
      const aliveA = getAlive(gridA);
      const aliveB = getAlive(gridB);
  
      if (!aliveA.length || !aliveB.length) {
        const winner = aliveA.length ? "–ò–≥—Ä–æ–∫ A" : aliveB.length ? "–ò–≥—Ä–æ–∫ B" : "–ù–∏–∫—Ç–æ";
        updateLog(`üèÅ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winner}`);
        return;
      }
  
      updateLog(`‚öî –†–∞—É–Ω–¥ ${round++} ‚Äî ${aliveA.length} vs ${aliveB.length}`);
  
      const attackersA = [...aliveA];
      const attackersB = [...aliveB];
      let i = 0;
  
      function step() {
        if (i >= Math.max(attackersA.length, attackersB.length)) {
          // –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è volleya ‚Äî —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
          return setTimeout(nextRound, 600);
        }
  
        const attackerA = attackersA[i % attackersA.length];
        const targetB   = getAlive(gridB)[0];
        const attackerB = attackersB[i % attackersB.length];
        const targetA   = getAlive(gridA)[0];
  
        if (attackerA && targetB) fight(attackerA, targetB);
        if (attackerB && targetA) fight(attackerB, targetA);
  
        // ** –°—Ä–∞–∑—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –≤—ã—Å—Ç—Ä–µ–ª–∞ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–æ—Å–∫–∏ **
        const currA = {
            attack:  gridA.filter(p => p.type==="üü•" && p.hp>0).length,
            defense: gridA.filter(p => p.type==="‚¨õ" && p.hp>0).length,
            hp: gridA.reduce((sum,p)=> sum + Math.max(p.hp,0), 0)
          };
        const currB = {
            attack:  gridB.filter(p => p.type==="üü•" && p.hp>0).length,
            defense: gridB.filter(p => p.type==="‚¨õ" && p.hp>0).length,
            hp: gridB.reduce((sum,p)=> sum + Math.max(p.hp,0), 0)
          };
        updatePlayerStats("playerA", currA, initialA);
        updatePlayerStats("playerB", currB, initialB);
  
        i++;
        setTimeout(step, 150);
      }
  
      step();
    }
  
    nextRound();
  }

function randomizeSelects(playerId) {
    const selects = document.querySelectorAll(`#${playerId}-selects select`);
    const giftNames = Object.keys(glsStats);
    selects.forEach(select => {
      const rnd = giftNames[Math.floor(Math.random() * giftNames.length)];
      select.value = rnd;
    });
  }



// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.onload = () => {
  ['playerA','playerB'].forEach(playerId => {
    // 1) —Å–æ–∑–¥–∞—ë–º –∏ —Ä–∞–Ω–¥–æ–º–∏–º —Å–µ–ª–µ–∫—Ç—ã
    createGiftInputs(playerId);
    randomizeGiftInputs(playerId);

    // 2) —Å–æ–±–∏—Ä–∞–µ–º –ø–æ–¥–∞—Ä–∫–∏ –∏ —Å—Ä–∞–∑—É —Å—Ç—Ä–æ–∏–º –≥—Ä–∏–¥
    const allPresents = getAllPresents(playerId);
    const grid        = generateGrid(allPresents);

    // 3) initialStats ‚Äî –∏–º–µ–Ω–Ω–æ –∏–∑ –ø–∏–∫—Å–µ–ª–µ–π, –∞ –Ω–µ –∏–∑ –ø–æ–¥–∞—Ä–∫–æ–≤
    const initial = {
      attack:  grid.filter(p => p.type === "üü•").length,
      defense: grid.filter(p => p.type === "‚¨õ").length,
      hp:      grid.reduce((sum, p) => sum + p.hp, 0)   // 10√ó81 = 810
    };
    initialStats[playerId] = initial;

    // 4) —Å—Ä–∞–∑—É —Ä–∏—Å—É–µ–º —Å—Ç–∞—Ç—É—Å‚Äë–±–∞—Ä—ã –∏ –≥—Ä–∏–¥
    updatePlayerStats(playerId, initial, initial);
    renderGrid(grid, playerId);
  });
};
